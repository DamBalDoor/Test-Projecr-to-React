{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useEffect, useRef } from \"react\";\nexport const useObserver = (ref, canLoad, isLoadung, callback) => {\n  _s();\n  const observer = useRef();\n  useEffect(() => {\n    var cb = function (entries, observer) {\n      if (isLoadung) return;\n      if (observer.current) observer.current.disconnect();\n      if (entries[0].isIntersecting && canLoad) {\n        callback();\n      }\n    };\n    observer.current = new IntersectionObserver(cb);\n    observer.current.observe(ref.current);\n  }, [isLoadung]);\n};\n_s(useObserver, \"mvUvGhiqkPzCYiMPAW/Py9ym/ZY=\");","map":{"version":3,"names":["useEffect","useRef","useObserver","ref","canLoad","isLoadung","callback","_s","observer","cb","entries","current","disconnect","isIntersecting","IntersectionObserver","observe"],"sources":["/Users/boostery/my-app/src/hooks/useObserver.js"],"sourcesContent":["import { useEffect, useRef } from \"react\";\n\nexport const useObserver = (ref, canLoad, isLoadung, callback) => {\n    const observer = useRef();\n    useEffect(()=> {\n        var cb = function(entries, observer) {\n          if(isLoadung) return;\n          if(observer.current) observer.current.disconnect();\n          if(entries[0].isIntersecting && canLoad) {\n            callback()\n          }\n          \n        };\n        observer.current = new IntersectionObserver(cb);\n        observer.current.observe(ref.current)\n      }, [isLoadung])\n}"],"mappings":";AAAA,SAASA,SAAS,EAAEC,MAAM,QAAQ,OAAO;AAEzC,OAAO,MAAMC,WAAW,GAAGA,CAACC,GAAG,EAAEC,OAAO,EAAEC,SAAS,EAAEC,QAAQ,KAAK;EAAAC,EAAA;EAC9D,MAAMC,QAAQ,GAAGP,MAAM,EAAE;EACzBD,SAAS,CAAC,MAAK;IACX,IAAIS,EAAE,GAAG,SAAAA,CAASC,OAAO,EAAEF,QAAQ,EAAE;MACnC,IAAGH,SAAS,EAAE;MACd,IAAGG,QAAQ,CAACG,OAAO,EAAEH,QAAQ,CAACG,OAAO,CAACC,UAAU,EAAE;MAClD,IAAGF,OAAO,CAAC,CAAC,CAAC,CAACG,cAAc,IAAIT,OAAO,EAAE;QACvCE,QAAQ,EAAE;MACZ;IAEF,CAAC;IACDE,QAAQ,CAACG,OAAO,GAAG,IAAIG,oBAAoB,CAACL,EAAE,CAAC;IAC/CD,QAAQ,CAACG,OAAO,CAACI,OAAO,CAACZ,GAAG,CAACQ,OAAO,CAAC;EACvC,CAAC,EAAE,CAACN,SAAS,CAAC,CAAC;AACrB,CAAC;AAAAE,EAAA,CAdYL,WAAW"},"metadata":{},"sourceType":"module","externalDependencies":[]}